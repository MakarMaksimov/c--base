#include <iostream>

using namespace std;
/*
1. Ссылка - жётско привязывает к объекту, на который показывает
(т.е. ссылку нельзя заставить показывать на другой объект).
2. Ссылку необходимо инициализировать при её объявлении
(т.е. нельзя создать ссылку, которая не показывает ни на какой объект).
3. Обычно ссылки не зработают с динамической памятью, ссылки - это  более
высокоуровневые сущности и они работают с "объектами" а не с памятью.
4.  Для работы со ссылками не нужны операторы взятия адреса и разыменования
(ссылку можно воспринимать, как другое имя для переменной)
5. Переменная должна существовать всё время существования ссылки.

Ссылки - гораздо удобнее указателей, но подходят не для всех ситуаций
(например, работа с динамической памятью)

*/


int& func() {
	int e = 100;
	return e; // Так делать нехорошо, так как переменная e - удалится после завершения функции
	// и ссылка будет показывать в мусор
}

int& func2(int& e) { // а вот так можно, потому что e ссылается на внешний объект, который
	return e; // не будет удалён после завершение функции
}

void SquarePS(double a, double& p, double& s) {
	p = a * 4;
	s = a * a;
}

void read(int**& a, int& n, int& m) {
	cin >> n >> m;
	a = new int* [n];
	for (int i = 0; i < n; i++)
	{
		a[i] = new int[m];
		for (int j = 0; j < m; j++)
			cin >> a[i][j];
	}
}

int main() {
	int a = 3;
	int& s = a;
	s = 5;
	cout << a << " ";
	int& ss = func();
	cout << ss << " ";
	int& sss = func2(a);
	cout << sss << endl;

	// Ссылка думает, что она - переменная a, настолько, что даже её адрес
	cout << "variable: " << &a << " reference: " << &s << endl; // совпадает с переменной a
	double perim, sq;
	SquarePS(3, perim, sq);
	cout << perim << " " << sq << endl;
	//SquarePS(3, 3, 3); // так нельзя, должен передаваться изменяемый объект
	const double perim2 = 1, sq2 =  1;
	//SquarePS(3, perim2, sq2); // так тоже нельзя, константы - тоже незименяемы
	
	// Правосторонние значения - значения, котороые нельзя записать слева от
	// оператора присвоения (знака равно):
	//2 = 3;
	//perim2 = 3;
	//sq + perim = 3;

	// Левосторонние значения - значения, которые можно поставтиь слева от
	// оператора присвоения (знака равно):
	perim = 5; // Переменные
	s = 4; // Ссылки
	// Выражения, которые возвращают ссылку:
	perim = sq = 5; // sq = 5 возвращает ссылку на переменную sq, значение которой и присваивается в perim
	(sq = 5) = 3; // но раз это ссылка, то мы можем менять с помщью неё значение переменной sq
	cout << sq << endl;
	int i = 1;
	cout << (3 + i++) << endl; // i++ - изменяет переменную i и возвращает её прежнее значение
	// (предварительно его сохранив)
	i = 1;
	cout << (3 + ++i) << endl; // i++ - изменяет переменную i и возвращает ссылку на эту переменную 
	// i++ = 4; // так нельзя, потому что i++ вернулно правостороннее значение
	++i = 5; // а так можно, потому что ++i вернуло ссылку (т.е. левостороннее значение)
	(cout << 2) << 3; // оператор << возвращает ссылку на поток, поэтому мы можем продолжать
	// cout              пользоваться этим потоком дальше
}
